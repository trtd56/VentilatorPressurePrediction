# -*- coding: utf-8 -*-
"""VentilatorLSTM_stacking

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/179cqInbjUD67Ekl1VjBJxf1-bRn-ffK1
"""

from google.colab import drive
drive.mount('/content/drive')

!pip install -q kaggle
!mkdir -p .kaggle
!cp "./drive/MyDrive/Study/config/kaggle.json" .kaggle/
!chmod 600 .kaggle/kaggle.json
!mv .kaggle /root

!kaggle competitions download -c ventilator-pressure-prediction

!unzip sample_submission.csv.zip
!unzip train.csv.zip
!unzip test.csv.zip

!rm *zip

with open("./drive/MyDrive/Study/config/wandb.txt", "r") as f:
    for line in f:
        wandb_key = line.replace("\n", "")

!wandb login {wandb_key}

import gc
import os
import random
import math

import numpy as np
import pandas as pd

from sklearn.model_selection import GroupKFold
from sklearn.linear_model import BayesianRidge

class config:
    #STACKING_MODELS = ["exp086_mask", "exp087_smooth_lag4", "exp098_transformer", "exp116_cnn"]
    #STACKING_MODELS = ["exp086_mask", "exp098_transformer", "exp116_cnn"]
    STACKING_MODELS = ["exp086_mask", "exp098_transformer", "exp116_cnn", "exp126_pseudo"]
    INPUT = "/content/"
    OUTPUT = "/content/drive/MyDrive/Study/ventilator-pressure-prediction"
    N_FOLD = 5
    SEED = 0

def set_seed(seed=config.SEED):
    random.seed(seed)
    os.environ["PYTHONHASHSEED"] = str(seed)
    np.random.seed(seed)
    torch.manual_seed(seed)
    torch.cuda.manual_seed(seed)
    torch.cuda.manual_seed_all(seed)
    torch.backends.cudnn.deterministic = True
    torch.backends.cudnn.benchmark = False

dfs = {}
for fname in config.STACKING_MODELS:
    _df = pd.read_csv(f"{config.OUTPUT}/{fname}/oof.csv")
    dfs[fname] = _df['oof'].tolist()
dfs['id'] = _df['id'].tolist()

oof_df = pd.DataFrame(dfs)

train_df = pd.read_csv(f"{config.INPUT}/train.csv")
test_df = pd.read_csv(f"{config.INPUT}/test.csv")
sub_df = pd.read_csv(f"{config.INPUT}/sample_submission.csv")

gkf = GroupKFold(n_splits=config.N_FOLD).split(train_df, train_df.pressure, groups=train_df.breath_id)
for fold, (_, valid_idx) in enumerate(gkf):
    train_df.loc[valid_idx, 'fold'] = fold

train_df = pd.merge(train_df, oof_df, on='id')

# Post Processing: https://www.kaggle.com/snnclsr/a-dummy-approach-to-improve-your-score-postprocess
unique_pressures = train_df["pressure"].unique()
sorted_pressures = np.sort(unique_pressures)
total_pressures_len = len(sorted_pressures)

def find_nearest(prediction):
    insert_idx = np.searchsorted(sorted_pressures, prediction)
    if insert_idx == total_pressures_len:
        return sorted_pressures[-1]
    elif insert_idx == 0:
        return sorted_pressures[0]
    lower_val = sorted_pressures[insert_idx - 1]
    upper_val = sorted_pressures[insert_idx]
    return lower_val if abs(lower_val - prediction) < abs(upper_val - prediction) else upper_val

models = []
stack_oof = np.zeros(len(train_df))
for fold in range(config.N_FOLD):
    X_train = train_df.query(f"fold!={fold}")[config.STACKING_MODELS].values
    y_train = train_df.query(f"fold!={fold}")['pressure'].values
    mask_train = train_df.query(f"fold!={fold}")['u_out'].values == 0

    X_valid = train_df.query(f"fold=={fold}")[config.STACKING_MODELS].values
    y_valid = train_df.query(f"fold=={fold}")['pressure'].values
    mask_valid = train_df.query(f"fold=={fold}")['u_out'].values == 0

    clf = BayesianRidge(n_iter=300, verbose=True)
    #clf.fit(X_train, y_train)
    clf.fit(X_train[mask_train], y_train[mask_train])
    models.append(clf)

    y_pred_valid = clf.predict(X_valid)
    stack_oof[train_df.query(f"fold=={fold}").index.values] = y_pred_valid
    score = np.abs(y_pred_valid - y_valid).mean()
    score_mask = np.abs(y_pred_valid[mask_valid] - y_valid[mask_valid]).mean()

    print(f'fold-{fold}: score={score}, mask_score{score_mask}')

oof_score = np.abs(stack_oof - train_df['pressure'].values).mean()
print(oof_score)

test_predicts = []
for fold in range(config.N_FOLD):
    clf = models[fold]

    X_test = []
    for fname in config.STACKING_MODELS:
        _df = pd.read_csv(f"{config.OUTPUT}/{fname}/sub_f{fold}.csv")
        X_test.append(_df['pressure'].values)
    X_test = np.stack(X_test).T

    y_pred_test = clf.predict(X_test)
    test_predicts.append(y_pred_test)

test_predicts_mean = np.stack(test_predicts).mean(0)
test_predicts_median = np.median(np.stack(test_predicts), 0)

for fold in range(config.N_FOLD):
    print(fold, models[fold].intercept_)
    display(pd.DataFrame([models[fold].coef_], columns=config.STACKING_MODELS))

#sub_df['pressure'] = test_predicts_mean
#sub_df.to_csv(f"./submission_stacking_mean.csv", index=None)
#sub_df["pressure"] = sub_df["pressure"].apply(find_nearest)
#sub_df.to_csv(f"./submission_stacking_mean_pp.csv", index=None)

sub_df['pressure'] = test_predicts_median
#sub_df.to_csv(f"./submission_stacking_median.csv", index=None)
sub_df["pressure"] = sub_df["pressure"].apply(find_nearest)
sub_df.to_csv(f"./submission_stacking_median_pp.csv", index=None)

cols = ['exp086_mask', 'exp087_smooth_lag4', 'exp098_transformer', 'exp116_cnn']

models = []
stack_oof = np.zeros(len(train_df))
for fold in range(config.N_FOLD):
    model_dic = {}
    for (r, c), df in train_df.groupby(['R', 'C']):
        X_train = df.query(f"fold!={fold}")[cols].values
        y_train = df.query(f"fold!={fold}")['pressure'].values
        mask_train = df.query(f"fold!={fold}")['u_out'].values == 0

        X_valid = df.query(f"fold=={fold}")[cols].values
        y_valid = df.query(f"fold=={fold}")['pressure'].values
        mask_valid = df.query(f"fold=={fold}")['u_out'].values == 0

        clf = BayesianRidge(n_iter=300, verbose=True)
        clf.fit(X_train[mask_train], y_train[mask_train])
        model_dic[f'{r}_{c}'] = clf

        stack_oof[df.query(f"fold=={fold}").index.values] = clf.predict(X_valid)
    models.append(model_dic)

oof_score = np.abs(stack_oof - train_df['pressure'].values).mean()
print(oof_score)

pred_dfs = []
for (r, c), df in test_df.groupby(['R', 'C']):
    print(r, c)
    test_predicts = []
    for fold in range(config.N_FOLD):
        print(fold)
        clf = models[fold][f'{r}_{c}']
        X_test = []
        for fname in config.STACKING_MODELS:
            _df = pd.read_csv(f"{config.OUTPUT}/{fname}/sub_f{fold}.csv")
            X_test.append(_df.loc[df.index, 'pressure'].values)
        X_test = np.stack(X_test).T
        y_pred_test = clf.predict(X_test)
        test_predicts.append(y_pred_test)
    df.loc[df.index, 'pressure'] = np.median(np.stack(test_predicts), 0)
    pred_dfs.append(df)

pred_rc_div = pd.concat(pred_dfs).sort_values("id").reset_index(drop=True)['pressure']

sub_df['pressure'] = pred_rc_div
sub_df["pressure"] = sub_df["pressure"].apply(find_nearest)
sub_df.to_csv(f"./submission_stacking_median_pp.csv", index=None)

#!rm -rf submission_stacking_*

pred_dfs[0]

from matplotlib import pyplot as plt

plt.scatter(test_predicts_median, pred_rc_div)



test_df

